#include <stdio.h>

#define MAX_BLOCKS 100
#define MAX_PROCESSES 100

void worstFit(int blocks[], int m, int processes[], int n) {
    int allocation[MAX_PROCESSES] = {-1};
    int i, j;

    for (i = 0; i < n; i++) {
        int worstFitIdx = -1;
        for (j = 0; j < m; j++) {
            if (blocks[j] >= processes[i]) {
                if (worstFitIdx == -1 || blocks[j] > blocks[worstFitIdx]) {
                    worstFitIdx = j;
                }
            }
        }

        if (worstFitIdx != -1) {
            allocation[i] = worstFitIdx;
            blocks[worstFitIdx] -= processes[i];
        }
    }

    printf("\nProcess No.\tProcess Size\tBlock No.\n");
    for (i = 0; i < n; i++) {
        printf(" %d \t\t%d \t\t", i + 1, processes[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    int blocks[MAX_BLOCKS], processes[MAX_PROCESSES];
    int m, n, i;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);

    printf("Enter the sizes of memory blocks: ");
    for (i = 0; i < m; i++) {
        scanf("%d", &blocks[i]);
    }

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the sizes of processes: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &processes[i]);
    }

    worstFit(blocks, m, processes, n);

    return 0;
}
